# vim: set filetype=sh :

#
# GIT
#

# pipe the git diff to color diff for nicer viewing
alias gd='git diff | colordiff'
# displays the current HEAD commit
alias gv='git rev-parse HEAD'
# displays a 'short' one-line status
alias gs='git status --short'
# show all branches
alias gb='git rev-parse --abbrev-ref HEAD'
alias gba='git branch --all'
alias gc='git checkout'
# amends a change to previous commit
alias fixup='git status && git commit --all --amend --reuse-message=HEAD'
# update remotes, checkout master, pull origin onto the master branch
gu () {
    tmp="${1:-master}"
    git fetch --all --prune
    git checkout "$tmp"
    git pull origin "$tmp" --tags
    git checkout -
}

# shell function to destroy local and remote branch references
blam () {
    echo "git branch -D $1"
    git branch -D $1
    echo "git push origin --delete $1"
    git push origin --delete $1
}

blamtag () {
    git tag -d $1
    git push origin :refs/tags/$1
}

delete-current-branch () {
    branch=$(git rev-parse --abbrev-ref HEAD)
    printf "Delete local and remote copies of branch: [$branch] (y/n)? "
    read resp
    if [[ "$resp" == "y" && "$branch" != "master" ]]; then
        git checkout master
        blam "$branch"
    else
        echo "Not Deleting"
    fi
    gu
}

#
# Miscellaneous settings:
#

export EDITOR=nvim
export BROWSER=firefox

alias df='df -h'
alias rg='rg --no-heading --line-number --hidden'
alias vim='nvim'
alias tree='tree -C'
# default to colored unified diffs
alias diff='colordiff --unified'
# Always show color with grep
alias grep='grep --color=auto'
# ls aliases
alias ls='ls -Fh --color'
alias ll='ls -lvH --group-directories-first'
alias la='ll -a'
alias l='ll'
# Lookup IP address in RADB
alias radb='whois -m'
# Get UTC rfc 3339 timestamp
alias utc='date --utc +%FT%TZ'
# Use pigz (parallel gzip) by default
alias gzip='pigz'
export TAR_OPTIONS="--use-compress-program=pigz"

alias shrug='echo "¯\_(ツ)_/¯"'
alias flip-table='echo "(╯°□°）╯︵ ┻━┻"'
alias flip-two-tables='echo "┻━┻︵ \(°□°)/ ︵┻━┻"'

# Quickly generates 1 GB of random data taking advantage of openssl salted encryption
alias randomdata='dd if=/dev/zero bs=1M count=1k 2>/dev/null | openssl enc -rc4-40 -pass pass:weak'
pwgen () {
    length="${1:-20}"
    local pw=$(head -c300 /dev/urandom | tr -dc 'A-Za-z0-9\.\?\-\_' | head -c "$length")
    echo "$pw"
    printf "$pw" | pbcopy
}

# GPG encrypt and decrypt helper functions:
encrypt () {
    gpg --output "$1.gpg" --encrypt --recipient gh@sparr.email "$1"
}
decrypt () {
    s=$(echo "$1" | sed "s/.gpg$//")
    gpg --output "$s" --decrypt "$1"
}

# applies default jq formatting to given file
jq-format () {
    TMP=$(jq . < "$1")
    if [[ "$?" != "0" ]]; then
        echo "Error parsing json: $1"
        return
    fi
    echo "$TMP" > "$1"
}

# gocheck
gocheck () {
    echo "Running go vet and staticcheck on changed packages"
    for d in $(git ls-files -m | grep "\.go" | grep -v "/vendor/" | xargs dirname | uniq); do
        echo "checking $d"
        go vet "./$d/." #&& staticcheck "./$d/."
    done
}

# macOS sets default open file limit to 256, raise it to 1000
ULIMIT=$(ulimit -n)
if (( $ULIMIT < 1000 )); then
    ulimit -n 1000
fi

# python setup
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"
eval "$(pyenv init -)"

# ruby setup
eval "$(rbenv init -)"

# Uninstalls all ruby gems for all rbenv versions
ruby-uninstall-all-gems () {
  for ruby in $(rbenv versions --bare); do
    echo "---------------------------------------"
    echo "$ruby"
    rbenv shell "$ruby"
    for gem in $(gem list --no-versions); do
      gem uninstall "$gem" -aIx
    done
  done
}

ruby-reinstall-all-versions () {
  for ruby in $(rbenv versions --bare); do
    echo "---------------------------------------"
    echo "$ruby"
    rbenv uninstall "$ruby"
    rbenv install "$ruby"
  done
}

epoch-converter () {
    seconds=$(echo "${1}" | head -c10)
    date -d "@${seconds}" "+%F %T %Z" --utc
    date -d "@${seconds}" "+%F %T %Z"
}

# bash function to launch chatgpt container with history
# see github.com/sparrc/chatgpt
chatgpt () {
    touch "$HOME/.chatgpt_history"
    docker run --name chatgpt --rm --mount type=bind,source="$HOME/.chatgpt_history",target="/.chatgpt_history" --interactive --env "OPENAI_API_KEY=$OPENAI_API_KEY" chatgpt
}


# GO:
export GOPATH="$HOME/ws/go"
export GOBIN="$GOPATH/bin"
export PATH="$GOBIN:$PATH"
# Prepend gnubin path for replacing BSD utils with GNU utils and local gem dir
export PATH="/usr/local/opt/coreutils/libexec/gnubin:/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
